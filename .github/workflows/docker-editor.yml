name: Build & Push Unity Editor

on:
  workflow_dispatch:
    inputs:
      base_tag:
        description: 'Base image tag (e.g., 22.04)'
        required: true
        default: '22.04'
      hub_version:
        description: 'Unity Hub version (e.g., 3.7.0)'
        required: true
        default: '3.12.1'
      editor_version:
        description: 'Unity Editor version (e.g., 6000.0.48f1)'
        required: true
        default: '6000.0.48f1'
      editor_changeset:
        description: 'Unity Editor changeset (e.g., 170d2541580d)'
        required: true
        default: '170d2541580d'
      editor_modules:
        description: 'Unity Editor modules (space separated, e.g., android webgl)'
        required: true
        default: 'android webgl ios'
      architecture:
        description: 'Target architecture (x86_64, arm64, or both)'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - arm64
          - both

jobs:
  build-editor:
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Set repository name to lowercase
        id: repo_name
        run: echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Set platform based on input
        id: platform
        run: echo "platforms=${{ github.event.inputs.architecture == 'both' && 'linux/amd64,linux/arm64' || github.event.inputs.architecture == 'arm64' && 'linux/arm64' || 'linux/amd64' }}" >> $GITHUB_OUTPUT

      - name: Build and push editor image
        uses: docker/build-push-action@v5
        with:
          context: ./editor
          file: ./editor/Dockerfile
          platforms: ${{ steps.platform.outputs.platforms }}
          build-args: |
            baseImage=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-base:${{ github.event.inputs.base_tag }}
            hubImage=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-hub:${{ github.event.inputs.hub_version }}-ubuntu${{ github.event.inputs.base_tag }}-${{ github.event.inputs.architecture }}
            version=${{ github.event.inputs.editor_version }}
            changeSet=${{ github.event.inputs.editor_changeset }}
            module=${{ github.event.inputs.editor_modules }}
            architecture=${{ github.event.inputs.architecture }}
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-editor:${{ github.event.inputs.editor_version }}-${{ github.event.inputs.architecture }}
          push: true

      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        shell: bash
        run: |
          # Determine build status from job context
          status="${{ job.status }}"
          case "$status" in
            "success")
              color="3066993"
              status="Success"
              ;;
            "failure")
              color="15158332"
              status="Failed"
              ;;
            "cancelled")
              color="15844367"
              status="Cancelled"
              ;;
            *)
              color="15844367"
              ;;
          esac
          
          editor_version="${{ github.event.inputs.editor_version }}"
          base_tag="${{ github.event.inputs.base_tag }}"
          hub_version="${{ github.event.inputs.hub_version }}"
          editor_changeset="${{ github.event.inputs.editor_changeset }}"
          editor_modules="${{ github.event.inputs.editor_modules }}"
          architecture="${{ github.event.inputs.architecture }}"
          
          payload=$(cat <<EOF
          {
            "embeds": [
              {
                "title": "Build ${status} for Unity Editor Docker image",
                "color": ${color},
                "description": "Build and push completed for Unity Editor Docker image.",
                "fields": [
                  {
                    "name": "Image",
                    "value": "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-editor:${editor_version}-${architecture}",
                    "inline": false
                  },
                  {
                    "name": "Base Tag",
                    "value": "${base_tag}",
                    "inline": true
                  },
                  {
                    "name": "Hub Version",
                    "value": "${hub_version}",
                    "inline": true
                  },
                  {
                    "name": "Unity Version",
                    "value": "${editor_version}",
                    "inline": true
                  },
                  {
                    "name": "Architecture",
                    "value": "${architecture}",
                    "inline": true
                  },
                  {
                    "name": "Editor Modules",
                    "value": "${editor_modules}",
                    "inline": false
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          curl -H "Content-Type: application/json" -d "$payload" $DISCORD_WEBHOOK
# After this workflow completes, the editor image will be available as docker.io/USERNAME/containerized-unity-editor:EDITORVERSION-ARCHITECTURE
# Make sure the base and hub images exist before running this workflow.
