name: Build & Push Unity Editor

on:
  workflow_dispatch:
    inputs:
      base_tag:
        description: 'Base image tag (e.g., 22.04)'
        required: true
        default: '22.04'
      hub_version:
        description: 'Unity Hub version (e.g., 3.7.0)'
        required: true
        default: '3.7.0'
      editor_version:
        description: 'Unity Editor version (e.g., 6000.0.48f1)'
        required: true
        default: '6000.0.48f1'
      editor_changeset:
        description: 'Unity Editor changeset (e.g., 170d2541580d)'
        required: true
        default: '170d2541580d'
      editor_modules:
        description: 'Unity Editor modules (space separated, e.g., android webgl)'
        required: true
        default: 'android webgl'
      architecture:
        description: 'Target architecture for Unity Editor (x86_64 or arm64)'
        required: true
        default: 'x86_64'

jobs:
  build-editor:
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_name
        run: echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push editor image
        uses: docker/build-push-action@v5
        with:
          context: ./editor
          file: ./editor/Dockerfile
          build-args: |
            baseImage=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-base:${{ github.event.inputs.base_tag }}
            hubImage=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-hub:${{ github.event.inputs.hub_version }}-ubuntu${{ github.event.inputs.base_tag }}
            version=${{ github.event.inputs.editor_version }}
            changeSet=${{ github.event.inputs.editor_changeset }}
            module=${{ github.event.inputs.editor_modules }}
            ARCHITECTURE=${{ github.event.inputs.architecture }}
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-editor:${{ github.event.inputs.editor_version }}-${{ github.event.inputs.architecture }}
          push: true

      - name: Notify Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          $embed = @{
            title = "Build completed for Unity Editor Docker image!"
            color = 3066993
            description = "Build and push completed for Unity Editor Docker image."
            fields = @(
              @{ name = "Build Status"; value = "Success"; inline = $false },
              @{ name = "Image"; value = "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/containerized-unity-editor:${{ github.event.inputs.editor_version }}"; inline = $false },
              @{ name = "Base Tag"; value = "${{ github.event.inputs.base_tag }}"; inline = $true },
              @{ name = "Hub Version"; value = "${{ github.event.inputs.hub_version }}"; inline = $true },
              @{ name = "Unity Version"; value = "${{ github.event.inputs.editor_version }}"; inline = $true },
              @{ name = "Editor Changeset"; value = "${{ github.event.inputs.editor_changeset }}"; inline = $false },
              @{ name = "Editor Modules"; value = "${{ github.event.inputs.editor_modules }}"; inline = $false },
              @{ name = "Workflow"; value = "${{ github.workflow }}"; inline = $true },
              @{ name = "Run Number"; value = "${{ github.run_number }}"; inline = $true },
              @{ name = "Commit"; value = "${{ github.sha }}"; inline = $false },
              @{ name = "Triggered By"; value = "${{ github.actor }}"; inline = $true }
            )
          }
          $payload = @{
            content = '<@&961819174282350683>'
            embeds = @($embed)
          } | ConvertTo-Json -Depth 4
          Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -Body $payload -ContentType 'application/json'
# Replace <@&ROLE_ID> with your Discord role ID to tag the role.
# Make sure to add DISCORD_WEBHOOK as a secret in your repository.
# After this workflow completes, the editor image will be available as docker.io/USERNAME/containerized-unity-editor:EDITORVERSION
# Make sure the base and hub images exist before running this workflow.